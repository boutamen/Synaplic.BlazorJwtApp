@page "/fetchdata/{action}"
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Weather Forecast</PageTitle>

<h1>Weather Forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string Action { get; set; }


    private WeatherForecast[] forecasts;
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            errorMessage = string.Empty;
            forecasts = null;

            var httpClient = HttpClientFactory.CreateClient(AuthenticationConstants.AuthClientName);
            forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{Action}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
